#!/bin/sh

# Auto Script Install Radius Monitor + Database + Mysql
# By Mutiara-Wrt | Maizil

# RTA-WRT
# RizkiKotet
cd /tmp
#===========================================================================================================================
if ! opkg list-installed | grep -q "^lolcat "; then
    echo "Error: lolcat is not installed."
    echo "opkg update && opkg install lolcat"
    opkg update && opkg install lolcat
    sleep 3
    exit 1
fi
#===========================================================================================================================
#===========================================================================================================================
# Cek Update Di Github | HASH
echo "Currently checking script updates..." | lolcat
GITHUB_URL="https://raw.githubusercontent.com/username/repo/main/script.sh"
LOCAL_SCRIPT=$(realpath "$0")
LOCAL_HASH=$(sha256sum "$LOCAL_SCRIPT" | awk '{ print $1 }')
TEMP_FILE=$(mktemp)
curl -s -o "$TEMP_FILE" "$GITHUB_URL" &>/dev/null
REMOTE_HASH=$(sha256sum "$TEMP_FILE" | awk '{ print $1 }')
clear
if [ "$LOCAL_HASH" != "$REMOTE_HASH" ]; then
  echo "Update local scripts with the latest scripts."
  cp "$LOCAL_SCRIPT" "${LOCAL_SCRIPT}.bak"
  mv "$TEMP_FILE" "$LOCAL_SCRIPT"
  chmod +x "$LOCAL_SCRIPT"
  exec "$LOCAL_SCRIPT" "$@"
else
  echo "The script is up to date, no update needed."
fi
rm -f "$TEMP_FILE"
#===========================================================================================================================
#===========================================================================================================================
install_packages_php8() {
    opkg update | lolcat
    opkg remove libgd --force-depends && opkg install libopenssl-legacy php8 php8-cgi php8-cli php8-fastcgi php8-fpm \
    php8-mod-bcmath php8-mod-calendar php8-mod-ctype php8-mod-curl php8-mod-dom php8-mod-exif \
    php8-mod-fileinfo php8-mod-filter php8-mod-gd php8-mod-iconv php8-mod-intl php8-mod-mbstring php8-mod-mysqli \
    php8-mod-mysqlnd php8-mod-opcache php8-mod-openssl php8-mod-pdo php8-mod-pdo-mysql php8-mod-phar php8-mod-session \
    php8-mod-xml php8-mod-xmlreader php8-mod-xmlwriter php8-mod-zip | lolcat
    clear
}
configur_php8() {
    sed -i -E "s|memory_limit = [0-9]+M|memory_limit = 100M|g" /etc/php.ini
    uci set uhttpd.main.index_page='index.php'
    uci set uhttpd.main.interpreter='.php=/usr/bin/php-cgi'
    uci commit uhttpd
    /etc/init.d/uhttpd restart
}
#===========================================================================================================================
#===========================================================================================================================
install_packages_pear() {
    wget -O go-pear.phar https://pear.php.net/go-pear.phar 2>&1 | lolcat
    ln -s /usr/bin/php-cli /usr/bin/php
    clear
}
configur_pear() {
    php go-pear.phar
    /root/pear/bin/pear install DB
    rm -rf go-pear.phar
}
#===========================================================================================================================
#===========================================================================================================================
install_packages_mariadb() {
    opkg update | lolcat
    opkg install mariadb-server mariadb-server-extra mariadb-client mariadb-client-extra libmariadb nano | lolcat
    clear
}
configur_mariadb() {
    sed -i -E "s|option enabled '0'|option enabled '1'|g" /etc/config/mysqld
    sed -i -E "s|# datadir		= /srv/mysql|datadir	= /usr/share/mysql|g" /etc/mysql/conf.d/50-server.cnf
    sed -i -E "s|127.0.0.1|0.0.0.0|g" /etc/mysql/conf.d/50-server.cnf
    until /etc/init.d/mysqld restart; do
        echo "Mysqld restart failed, retrying..." | lolcat
        sleep 2
    done
    sleep 2
    until /etc/init.d/mysqld reload; do
        echo "Mysqld Reload failed, retrying..." | lolcat
        sleep 2
    done

    echo -n "Enter the MariaDB root password: " | lolcat
    read -s root_password
    echo ""
    mysql -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('${root_password}');"
    mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${root_password}';"
    mysql -u root -p"${root_password}" <<EOF
DELETE FROM mysql.user WHERE User='';
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test_%';
FLUSH PRIVILEGES;
EOF

    mysql -u root -p"${root_password}" -e "CREATE DATABASE radius CHARACTER SET utf8";
    mysql -u root -p"${root_password}" -e "GRANT ALL ON radius.* TO 'radius'@'localhost' IDENTIFIED BY 'radius' WITH GRANT OPTION";
}
#===========================================================================================================================
#===========================================================================================================================
install_packages_radmon() {
    cd /www
    if [ -d "/www/RadiusMonitor" ]; then rm -rf /www/RadiusMonitor; fi
    if [ -d "/www/RadiusMonitor-main" ]; then rm -rf /www/RadiusMonitor-main; fi
    wget -O radmon.zip https://github.com/rtaserver/RadiusMonitor/archive/refs/heads/main.zip 2>&1 | lolcat
    unzip radmon.zip | lolcat
    rm -rf radmon.zip
    mv RadiusMonitor-main RadiusMonitor
    clear
}
configur_radmon() {
    echo "Installing Database Radius Monitor." | lolcat
    echo -n "Enter the MariaDB root password: " | lolcat
    read -s root_password
    echo ""
    mysql -u root -p"${root_password}" radius -e "SET FOREIGN_KEY_CHECKS = 0; $(mysql -u root -p"${root_password}" radius -e 'SHOW TABLES' | awk '{print "DROP TABLE IF EXISTS `" $1 "`;"}' | grep -v '^Tables' | tr '\n' ' ') SET FOREIGN_KEY_CHECKS = 1;"
    mysql -u root -p"${root_password}" radius < /www/RadiusMonitor/radius_monitor.sql
    cat <<'EOF' >/usr/lib/lua/luci/controller/radmon.lua
module("luci.controller.radmon", package.seeall)
function index()
entry({"admin","services","radmon"}, template("radmon"), _("Radius Monitor"), 3).leaf=true
end
EOF

    cat <<'EOF' >/usr/lib/lua/luci/view/radmon.htm
<%+header%>
<div class="cbi-map"><br/>
<iframe id="rad_mon" style="width: 100%; min-height: 100vh; border: none; border-radius: 2px;"></iframe>
</div>
<script type="text/javascript">
document.getElementById("rad_mon").src = window.location.protocol + "//" + window.location.host + "/RadiusMonitor";
</script>
<%+footer%>
EOF

chmod +x /usr/lib/lua/luci/view/radmon.htm
}
#===========================================================================================================================
#===========================================================================================================================
install_packages_phpmyadmin() {
    if [ -d "/www/phpmyadmin" ]; then rm -rf /www/phpmyadmin; fi
    if [ -d "/www/phpMyAdmin-5.2.1-all-languages" ]; then rm -rf /www/phpMyAdmin-5.2.1-all-languages; fi
    cd /www
    wget https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip 2>&1 | lolcat
    unzip phpMyAdmin-5.2.1-all-languages.zip | lolcat
    rm -rf phpMyAdmin-5.2.1-all-languages.zip
    mv phpMyAdmin-5.2.1-all-languages phpmyadmin
}
configur_phpmyadmin() {
    mv /www/phpmyadmin/config.sample.inc.php /www/phpmyadmin/config.inc.php
    sed -i -E "s|localhost|127.0.0.1|g" /www/phpmyadmin/config.inc.php
    cat <<'EOF' >/usr/lib/lua/luci/controller/phpmyadmin.lua
module("luci.controller.phpmyadmin", package.seeall)
function index()
entry({"admin","services","phpmyadmin"}, template("phpmyadmin"), _("PhpMyAdmin"), 3).leaf=true
end
EOF

    cat <<'EOF' >/usr/lib/lua/luci/view/phpmyadmin.htm
<%+header%>
<div class="cbi-map"><br/>
<iframe id="phpmyadmin" style="width: 100%; min-height: 100vh; border: none; border-radius: 2px;"></iframe>
</div>
<script type="text/javascript">
document.getElementById("phpmyadmin").src = window.location.protocol + "//" + window.location.host + "/phpmyadmin";
</script>
<%+footer%>
EOF

chmod +x /usr/lib/lua/luci/view/phpmyadmin.htm
}
#===========================================================================================================================
#===========================================================================================================================
install_packages_freeradius() {
    opkg update | lolcat
    opkg install freeradius3 freeradius3-common freeradius3-default freeradius3-mod-always freeradius3-mod-attr-filter \
    freeradius3-mod-chap freeradius3-mod-detail freeradius3-mod-digest freeradius3-mod-eap \
    freeradius3-mod-eap-gtc freeradius3-mod-eap-md5 freeradius3-mod-eap-mschapv2 freeradius3-mod-eap-peap \
    freeradius3-mod-eap-pwd freeradius3-mod-eap-tls freeradius3-mod-eap-ttls freeradius3-mod-exec \
    freeradius3-mod-expiration freeradius3-mod-expr freeradius3-mod-files freeradius3-mod-logintime \
    freeradius3-mod-mschap freeradius3-mod-pap freeradius3-mod-preprocess freeradius3-mod-radutmp \
    freeradius3-mod-realm freeradius3-mod-sql freeradius3-mod-sql-mysql freeradius3-mod-sqlcounter \
    freeradius3-mod-unix freeradius3-utils libfreetype wget-ssl curl unzip tar zoneinfo-asia | lolcat
    clear
    if [ -d "/tmp/radmoninstaller" ]; then rm -rf /tmp/radmoninstaller; fi
    mkdir /tmp/radmoninstaller
    cd /tmp/radmoninstaller
    wget https://github.com/rtaserver/RadiusMonitor/archive/refs/heads/radius.zip 2>&1 | lolcat
    unzip radius.zip | lolcat
    rm -rf /tmp/radius.zip
    clear
}
configur_freeradius() {
    /etc/init.d/radiusd stop
    rm -rf /etc/freeradius3/mods-available
    rm -rf /etc/freeradius3/mods-config
    rm -rf /etc/freeradius3/mods-enabled
    rm -rf /etc/freeradius3/policy.d
    rm -rf /etc/freeradius3/sites-available
    rm -rf /etc/freeradius3/sites-enabled
    rm -rf /etc/freeradius3/clients.conf
    rm -rf /etc/freeradius3/dictionary
    rm -rf /etc/freeradius3/proxy.conf
    rm -rf /etc/freeradius3/radiusd.conf

    cd /tmp/radmoninstaller/RadiusMonitor-radius/etc/freeradius3
    mv mods-available /etc/freeradius3/mods-available
    mv mods-config /etc/freeradius3/mods-config
    mv mods-enabled /etc/freeradius3/mods-enabled
    mv policy.d /etc/freeradius3/policy.d
    mv sites-available /etc/freeradius3/sites-available
    mv sites-enabled /etc/freeradius3/sites-enabled
    mv clients.conf /etc/freeradius3/clients.conf
    mv dictionary /etc/freeradius3/dictionary
    mv proxy.conf /etc/freeradius3/proxy.conf
    mv radiusd.conf /etc/freeradius3/radiusd.conf

    rm -rf /usr/share/freeradius3
    cd /tmp/radmoninstaller/RadiusMonitor-radius/usr/share
    mv freeradius3 /usr/share/freeradius3

    cd /etc/freeradius3/mods-enabled
    ln -s ../mods-available/always
    ln -s ../mods-available/attr_filter
    ln -s ../mods-available/chap
    ln -s ../mods-available/detail
    ln -s ../mods-available/digest
    ln -s ../mods-available/eap
    ln -s ../mods-available/exec
    ln -s ../mods-available/expiration
    ln -s ../mods-available/expr
    ln -s ../mods-available/files
    ln -s ../mods-available/logintime
    ln -s ../mods-available/mschap
    ln -s ../mods-available/pap
    ln -s ../mods-available/preprocess
    ln -s ../mods-available/radutmp
    ln -s ../mods-available/realm
    ln -s ../mods-available/sql
    ln -s ../mods-available/sradutmp
    ln -s ../mods-available/unix

    cd /etc/freeradius3/sites-enabled
    ln -s ../sites-available/default
    ln -s ../sites-available/inner-tunnel

    rm -rf /tmp/radmoninstaller
    
    if ! grep -q '/etc/init.d/radiusd restart' /etc/rc.local; then
        sed -i '/exit 0/i /etc/init.d/radiusd restart' /etc/rc.local
    fi
}
#===========================================================================================================================
#===========================================================================================================================
install_packages_chilli() {
    opkg update | lolcat
    opkg install coova-chilli | lolcat
    clear
    if [ -d "/tmp/radmoninstaller" ]; then rm -rf /tmp/radmoninstaller; fi
    mkdir /tmp/radmoninstaller
    cd /tmp/radmoninstaller
    wget https://github.com/rtaserver/RadiusMonitor/archive/refs/heads/radius.zip 2>&1 | lolcat
    unzip radius.zip | lolcat
    rm -rf /tmp/radius.zip
    clear
}
configur_chilli() {
    /etc/init.d/chilli stop
    rm -rf /etc/config/chilli
    rm -rf /etc/init.d/chilli

    mv /tmp/radmoninstaller/RadiusMonitor-radius/etc/config/chilli /etc/config/chilli
    mv /tmp/radmoninstaller/RadiusMonitor-radius/etc/init.d/chilli /etc/init.d/chilli
    mv /tmp/radmoninstaller/RadiusMonitor-radius/usr/share/hotspotlogin /usr/share/hotspotlogin
    ln -s /usr/share/hotspotlogin /www/hotspotlogin
    
    chmod +x /etc/init.d/chilli
    rm -rf /tmp/radmoninstaller
}
#===========================================================================================================================
#===========================================================================================================================
configur_netfirewall() {
    if ! uci show network | grep -q "br-hotspot"; then
        echo "Adding new network configuration for br-hotspot..." | lolcat

        # Prompt for device name, default to wlan0 if empty
        echo ""
        echo "Enter the available Device Name. If empty, 'wlan0' will be used." | lolcat
        echo -n "Enter Device Name: " | lolcat
        read dev_hotspot

        # Set default to 'wlan0' if input is empty
        if [ -z "$dev_hotspot" ]; then
            dev_hotspot="wlan0"
        fi

        # Apply new network configuration
        uci batch <<EOF
add network device
set network.@device[-1].type='bridge'
set network.@device[-1].name='br-hotspot'
add_list network.@device[-1].ports='${dev_hotspot}'
set network.@device[-1].ipv6='0'

set network.hotspot=interface
set network.hotspot.proto='static'
set network.hotspot.device='br-hotspot'
set network.hotspot.ipaddr='10.10.30.1'
set network.hotspot.netmask='255.255.255.0'

set network.chilli=interface
set network.chilli.proto='none'
set network.chilli.device='tun0'
EOF
        uci commit network

        echo "Network configuration applied successfully!" | lolcat
    else
        echo "Network configuration for br-hotspot already exists. Skipping..." | lolcat
    fi

    # Check if the firewall zone 'hotspot' already exists
    if ! uci show firewall | grep -q "zone.*hotspot"; then
        echo "Adding new firewall configuration for hotspot..." | lolcat

        # Apply new firewall configuration
        uci batch <<EOF
add_list firewall.@zone[0].network='hotspot'

add firewall zone
set firewall.@zone[-1].name='tun'
set firewall.@zone[-1].input='ACCEPT'
set firewall.@zone[-1].output='ACCEPT'
set firewall.@zone[-1].forward='REJECT'
add_list firewall.@zone[-1].network='chilli'

add firewall forwarding
set firewall.@forwarding[-1].src='tun'
set firewall.@forwarding[-1].dest='wan'

add firewall forwarding
set firewall.@forwarding[-1].src='lan'
set firewall.@forwarding[-1].dest='wan'

add firewall zone
set firewall.@zone[-1].name='hotspot'
set firewall.@zone[-1].input='ACCEPT'
set firewall.@zone[-1].output='ACCEPT'
set firewall.@zone[-1].forward='ACCEPT'

add firewall forwarding
set firewall.@forwarding[-1].src='hotspot'
set firewall.@forwarding[-1].dest='tun'
EOF
        uci commit firewall

        echo "Firewall configuration applied successfully!" | lolcat
    else
        echo "Firewall configuration for hotspot already exists. Skipping..." | lolcat
        sleep 2
    fi
}
#===========================================================================================================================
while true; do
    clear
    echo "================================================" | lolcat
    echo "           Auto Script | RadiusChilli           " | lolcat
    echo "================================================" | lolcat
    echo ""
    echo "    [*]     RadiusChilli By : Maizil   [*]" | lolcat
    echo "    [*]    Radius Monitor By : Maizil  [*]" | lolcat
    echo "    [*]   Auto Script By : RizkiKotet  [*]" | lolcat
    echo ""
    echo " > 1 - Install Packages PHP8" | lolcat
    echo " > 2 - Install Packages PEAR DB" | lolcat
    echo " > 3 - Install Packages MariaDB" | lolcat
    echo " > 4 - Install Packages Radius Monitor + Database" | lolcat
    echo " > 5 - Install Packages PhpMyAdmin" | lolcat
    echo " > 6 - Install Packages Freeradius3 + Config" | lolcat
    echo " > 7 - Install Packages Chilli + Config" | lolcat
    echo " > 8 - Install Network Firewall Hotspot" | lolcat
    echo ""
    echo " > 9 - Reload Freeradius And Chilli" | lolcat
    echo " > 10 - Exit" | lolcat
    echo ""
    echo "================================================" | lolcat

    echo -n "Please select an option (1-10): " | lolcat
    read choice

    case $choice in
        1)
            echo "Installing PHP8 packages..." | lolcat
            sleep 2
            clear
            until install_packages_php8; do
                echo "Installation failed, retrying..." | lolcat
                sleep 5
            done
            configur_php8
            clear
            echo "Installation completed successfully!" | lolcat
            ;;
        2)
            echo "Installing PEAR packages..." | lolcat
            sleep 2
            clear
            until install_packages_pear; do
                echo "Installation failed, retrying..." | lolcat
                sleep 5
            done
            configur_pear
            clear
            echo "Installation completed successfully!" | lolcat
            ;;
        3)
            echo "Installing MariaDB packages..." | lolcat
            sleep 2
            clear
            until install_packages_mariadb; do
                echo "Installation failed, retrying..." | lolcat
                sleep 5
            done
            configur_mariadb
            clear
            echo "Installation completed successfully!" | lolcat
            ;;
        4)
            echo "Installing Radius Monitor packages..." | lolcat
            sleep 2
            clear
            until install_packages_radmon; do
                echo "Installation failed, retrying..." | lolcat
                sleep 5
            done
            configur_radmon
            clear
            echo "Installation completed successfully!" | lolcat
            IP=$(uci get network.lan.ipaddr)
            echo "Direct Link : http://${IP}/RadiusMonitor/" | lolcat
            echo "Menu : Services -> Radius Monitor" | lolcat
            sleep 3
            ;;
        5)
            echo "Installing PhpMyAdmin packages..." | lolcat
            sleep 2
            clear
            until install_packages_phpmyadmin; do
                echo "Installation failed, retrying..." | lolcat
                sleep 5
            done
            configur_phpmyadmin
            clear
            echo "Installation completed successfully!" | lolcat
            IP=$(uci get network.lan.ipaddr)
            echo "Direct Link : http://${IP}/phpmyadmin/" | lolcat
            echo "Menu : Services -> PhpMyAdmin" | lolcat
            sleep 3
            ;;
        6)
            echo "Installing Freeradius3 packages..." | lolcat
            sleep 2
            clear
            until install_packages_freeradius; do
                echo "Installation failed, retrying..." | lolcat
                sleep 5
            done
            configur_freeradius
            clear
            echo "Installation completed successfully!" | lolcat
            ;;
        7)
            echo "Installing Chilli packages..." | lolcat
            sleep 2
            clear
            until install_packages_chilli; do
                echo "Installation failed, retrying..." | lolcat
                sleep 5
            done
            configur_chilli
            clear
            echo "Installation completed successfully!" | lolcat
            ;;
        8)
            echo "Configuring Network Firewall Hotspot..." | lolcat
            sleep 2
            clear
            configur_netfirewall
            clear
            echo "Installation completed successfully!" | lolcat
            ;;
        9)
            echo "Reloading Freeradius..." | lolcat
            until /etc/init.d/radiusd restart; do
                echo "Freeradius reload failed, retrying..." | lolcat
            sleep 2
            done
            echo "Freeradius reloaded successfully!" | lolcat
            echo "Reloading Chilli..." | lolcat
            until /etc/init.d/chilli restart; do
                echo "Chilli reload failed, retrying..." | lolcat
                sleep 2
            done
            echo "Chilli reloaded successfully!" | lolcat
            ;;
        10)
            echo "Exiting..." | lolcat
            exit 0
            ;;
        *)
            echo "Invalid option selected!" | lolcat
            ;;
    esac

    echo "Returning to menu..." | lolcat
    cd /tmp
    sleep 2
done